#include "WPILib.h"
#include "Pneumatics.h"
#include "MecanumDrive.h"
#include "CameraServo.h"

/**
 * This is a demo program showing the use of the RobotBase class.
 * The SimpleRobot class is the base of a robot application that will automatically call your
 * Autonomous and OperatorControl methods at the right time as controlled by the switches on
 * the driver station or the field controls.
 */
class DefaultRobot : public SimpleRobot
{
	RobotDrive *myRobot;			// robot drive system
	DigitalInput *armUpperLimit;	// arm upper limit switch
	DigitalInput *armLowerLimit;	// arm lower limit switch
	//Joystick *rightStick;			// joystick 1 (arcade stick or right tank stick)
	//Joystick *leftStick;			// joystick 2 (tank left stick)
	Joystick *joystick;				// joystick 3 to control arm
	DriverStation *ds;				// driver station object
	Pneumatics *pneumatics;
	MecanumDrive *myDrive;  		//Mecanum Drive object
	Relay * m_relay;
	CameraServo * camera_servo;

	


	enum							// Driver Station jumpers to control program operation
	{ ARCADE_MODE = 1,				// Tank/Arcade jumper is on DS Input 1 (Jumper present is arcade)
		ENABLE_AUTONOMOUS = 2,		// Autonomous/Teleop jumper is on DS Input 2 (Jumper present is autonomous)
	} jumpers;	                            

public:
	/**
	 * 
	 * g
	 * Constructor for this robot subclass.
	 * Create an instance of a RobotDrive with left and right motors plugged into PWM
	 * ports 1 and 2 on the first digital module.
	 */
	DefaultRobot()
	{
		ds = DriverStation::GetInstance();
		myRobot = new RobotDrive(1, 3, 2, 4);	// create robot drive base
		//rightStick = new Joystick(1);			// create the joysticks
		//leftStick = new Joystick(2);
		joystick = new Joystick(1);
		armUpperLimit = new DigitalInput(1);	// create the limit switch inputs
		armLowerLimit = new DigitalInput(2);
		//Update the motors at least every 100ms.
		myRobot->SetExpiration(0.1);
		pneumatics = new Pneumatics();
		myDrive = new MecanumDrive();  //Create the mecanum drive
		m_relay = new Relay (1, Relay::kBothDirections);	//creates the compressor
		m_relay->Set(Relay::kForward);
		//m_compressor = new Compressor (1, 2);
		//m_compressor->Start();
		//image = new HSLImage();
		//AxisCamera &camera = AxisCamera::GetInstance();
		//camera.WriteResolution(AxisCameraParams::kResolution_160x120);
		//Wait(3.0);
		camera_servo = new CameraServo(10);

	}

	/**
	 * Drive left & right motors for 2 seconds, enabled by a jumper (jumper
	 * must be in for autonomous to operate).
	 */
	void Autonomous()
	{
		myRobot->SetSafetyEnabled(false);
		if (ds->GetDigitalIn(ENABLE_AUTONOMOUS) == 1)	// only run the autonomous program if jumper is in place
		{
			myRobot->Drive(0.5, 0.0);			// drive forwards half speed
			Wait(2.0);							//    for 2 seconds
			myRobot->Drive(0.0, 0.0);			// stop robot
		}
		myRobot->SetSafetyEnabled(true);
	}

	/**
	 * Runs the motors under driver control with either tank or arcade steering selected
	 * by a jumper in DS Digin 0. Also an arm will operate based on a joystick Y-axis. 
	 */
	void OperatorControl()
	{
		Victor armMotor(5);						// create arm motor instance
		while (IsOperatorControl())
		{
			//Get all the values that the joystick is sending
			float magnitude = joystick->GetMagnitude(); 
			float direction =  joystick->GetDirectionDegrees();
			float twist = joystick->GetTwist();

			//Tell the robot to do drive with given values
			myDrive->Drive(magnitude, direction, twist);
			if (joystick->GetRawButton(4)){
				//camera->GetImage(image);
				SmartDashboard::PutString("Button 4 ", "PRESSED");
			
			}
			else{
				SmartDashboard::PutString("Button 4 ", "NOT PRESSED");
			}
			/*float armStickDirection = armStick->GetY();

//Not using this code			
			// if at a limit and telling the arm to move past the limit, don't drive the motor
			if ((armUpperLimit->Get() == 0) && (armStickDirection > 0.0)) {
				armStickDirection = 0;
			} else if ((armLowerLimit->Get() == 0) && (armStickDirection < 0.0)) {
				armStickDirection = 0;
			}

			// Set the motor value 
			armMotor.Set(armStickDirection);
			Wait(0.005);*/

//Pneumatic shooter control
			pneumatics->Shooter();
//Turns the camera			
			camera_servo->turnCamera();
		}
	}
};

START_ROBOT_CLASS(DefaultRobot);
